from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio
from datetime import datetime, timedelta
from aiogram.exceptions import TelegramBadRequest
import os
from aiogram.types import FSInputFile
from typing import Union

from app.database import requests as rq
import app.keyboards as kb

from aiogram.fsm.state import State, StatesGroup

class Reg(StatesGroup):
    home = State()
    name = State()
    phone = State()
    waiting_link = State()
    waiting_add = State()

class EditChannelState(StatesGroup):    
    waiting_for_new_link = State()
    chanel_wait = State()
    des_chanel_wait = State()
    des_profile_wait = State()
    waiting_tg_id = State()
    waiting_for_channel_description = State()
    waiting_for_profile_description = State()
    waiting_for_link_update = State()

class Step(StatesGroup):
    des_profile = State()
    des_chanel = State()   
    link = State()
    wait_style = State()
    style = State()
    all_ready = State()
    add_chanels = State()
    slep = State()
    period_com = State()
    sleep_bot = State()
    sleep_sleep = State()
    launch_bot = State()
    all_ready_go = State() 


    
router = Router()




#‚Å°‚Å¢‚Å£‚Å¢----------------------------------------------------------------------------------------–°–¢–ê–†–¢–û–í–´–ï-–ö–û–ú–ê–ù–î–´-------------------------------------------------------------------------------------------------‚Å°
@router.message(CommandStart())
async def com_start(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await rq.set_user(message.from_user.id)
    await rq.set_login(message.from_user.id, message.from_user.username)
    user = await rq.get_user_data(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
    is_profile_fully_filled = user.link and user.my_chanel_description and user.my_profile_description
    
    if is_profile_fully_filled:
        # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        welcome_text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>\n\n"
            f"üéØ <b>–í–∞—à —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
            f"‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
            f"üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
            f"‚≠ê –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã\n"
            f"üíé –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
            f"üöÄ –ó–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞\n\n"
            f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
        )
        await message.answer(
            welcome_text,
            parse_mode="HTML",
            reply_markup=kb.home_page()
        )
        return

    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ
    current_dir = os.path.dirname(os.path.abspath(__file__))
    video_path = os.path.join(current_dir, "..", "video", "first.mp4")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if os.path.exists(video_path):
        video_msg = await message.answer_video(
            video=FSInputFile(video_path),
            caption="<b>–ù–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥</b>",
            parse_mode="HTML"
        )
        await state.update_data(video_message_id=video_msg.message_id)
    welcome_text = (
        
    )
    
    await message.answer(
        "<b>üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞!</b>\n\n"
        "‚úÖ <b>–ß—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç:</b>\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å—Ç–æ–≤\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏\n"
        "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n\n"
        "üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:</b>\n"
        "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "2. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n",
        parse_mode="HTML",
        reply_markup=kb.start()
    )

    
    
@router.callback_query(F.data.startswith("pre_start"))
async def com_start(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    video_message_id = data.get("video_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if video_message_id:
        try:
            await callback.bot.delete_message(callback.message.chat.id, video_message_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")

    await state.clear()
    user = await rq.get_user_data(callback.from_user.id)
    sub = user.sub_id

    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å",
                                    parse_mode="HTML",
                                    reply_markup=kb.main_keyboard_2())

 #‚Å°‚Å¢‚Å£‚Å¢----------------------------------------------------------------------------------------------------------------------------------------------------------------------------‚Å°
@router.callback_query(F.data.startswith("start"))
async def com_start(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    video_message_id = data.get("video_message_id")

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    

    await state.clear()
    user = await rq.get_user_data(callback.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
    is_profile_fully_filled = user.link and user.my_chanel_description and user.my_profile_description
    
    if is_profile_fully_filled:
        await callback.message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω", reply_markup=kb.go())
        await state.set_state(Step.all_ready_go)
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # –ü–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
    await state.update_data(is_profile_fully_filled=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await callback.message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –∫–∞–Ω–∞–ª. </b>\n\n"
                                        " –í –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞ –ª—é–¥–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∏–º–µ–Ω–Ω–æ –Ω–∞ –Ω–µ–≥–æ!", parse_mode="HTML")
    await state.update_data(last_message_id=msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    await state.set_state(Step.link)
    
    
    
@router.message(Step.link) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async def process_link(message: Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if last_message_id:
        await message.bot.delete_message(message.chat.id, last_message_id)
    
    new_link = message.text

    if len(new_link) > 35:
        msg = await message.answer("–û—à–∏–±–∫–∞! –°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 35 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.update_data(last_message_id=msg.message_id)
        return
    
    if not new_link.startswith("t.me/"):
        msg = await message.answer("–û—à–∏–±–∫–∞! –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å t.me/. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.update_data(last_message_id=msg.message_id)
        return

    succeful_add = await rq.add_link(message.from_user.id, new_link)

    if succeful_add:
        msg = await message.answer("‚úÖ –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        msg = await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ.")
    
    await state.update_data(last_message_id=msg.message_id)
    photo_path = os.path.join(os.getcwd(), "photo", "des_chanel.jpg")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(photo_path):
        await message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
        return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    photo = FSInputFile(photo_path)
    photo_msg = await message.answer_photo(photo=photo)
        
    msg = await message.answer(
        "<b>–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –í–∞–º –Ω—É–∂–Ω–æ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª.</b>\n\n"
        "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ.",
        parse_mode="HTML"
    )
    await state.update_data(last_message_id=msg.message_id)
    await state.update_data(last_photo_id=photo_msg.message_id)
    await state.set_state(Step.des_chanel)



@router.message(Step.des_chanel)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
async def process_new_des_chanel(message: Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    last_photo_id = data.get("last_photo_id")  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    if last_message_id:
        await message.bot.delete_message(message.chat.id, last_message_id)
    if last_photo_id:
        await message.bot.delete_message(message.chat.id, last_photo_id)
    
    new_des_chanel = message.text.strip() 
    words_count = len(new_des_chanel.split())  
    
    if len(message.text) > 700:
        msg = await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤(")
        await state.update_data(last_message_id=msg.message_id)
    else:
        existing_description = await rq.update_chanel_description(message.from_user.id, new_des_chanel)
        msg = await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≤ –±–∞–∑—É —Ç–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ", parse_mode="HTML")
        
        await state.update_data(last_message_id=msg.message_id)
        
        msg = await message.answer(
            "<b>–û–ø–∏—à–∏ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –±–æ—Ç–∞.</b>\n\n 70 —Å–∏–º–≤–æ–ª–æ–≤ + —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª. –ü—Ä–∏–º–µ—Ä –∫–∞–∫ –Ω–∞ —Ñ–æ—Ç–æ –Ω–∏–∂–µ\n"
            "–û–Ω–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—Å—è –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.\n\n",
            parse_mode="HTML"
        )
        
        photo_path = os.path.join(os.getcwd(), "photo", "des_profile.jpg")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(photo_path):
            await message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        photo = FSInputFile(photo_path)
        photo_msg = await message.answer_photo(photo=photo)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ
        await state.update_data(last_photo_id=photo_msg.message_id)
        await state.set_state(Step.des_profile)

@router.message(Step.des_profile)  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def process_new_des_profile(message: Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    last_photo_id = data.get("last_photo_id")  # ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
    if last_message_id:
        await message.bot.delete_message(message.chat.id, last_message_id)
    if last_photo_id:
        await message.bot.delete_message(message.chat.id, last_photo_id)
    
    new_des_profile = message.text.strip()
    
    if len(new_des_profile) > 70:
        msg = await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–≤(")
        await state.update_data(last_message_id=msg.message_id)
    else:
        existing_description = await rq.add_profile_description(message.from_user.id, new_des_profile)
        
        if existing_description and existing_description != True:
            msg = await message.answer(f"–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n\n<b>{existing_description}</b>", parse_mode="HTML")
        else:
            msg = await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª –≤ –±–∞–∑—É —Ç–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", parse_mode="HTML")
        
        await state.update_data(last_message_id=msg.message_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è
        user = await rq.get_user_data(message.from_user.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø–æ–ª–Ω–µ–Ω –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é
        is_profile_fully_filled = user.link and user.my_chanel_description and user.my_profile_description
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await message.answer(
            "<b>–¢–µ–ø–µ—Ä—å —Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.</b>\n\n"
            "üîπ <b>–°—Ç–∏–ª—å –°–µ—Ç–∞ –ì–æ–¥–∏–Ω–∞ (–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ –∏ –ø—Ä–æ–¥–∞–∂–∏)</b>\n"
            "–≠—Ç–æ—Ç —Å—Ç–∏–ª—å –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π –±—Ä–µ–Ω–¥. "
            "–ú–∏–Ω–∏–º—É–º –≤–æ–¥—ã, —á–µ—Ç–∫–æ–µ –£–¢–ü (—É–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ), –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é.\n\n"
            "üîπ <b>–°—Ç–∏–ª—å –ì–∞—è –ö–∞–≤–∞—Å–∞–∫–∏ (–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è)</b>\n"
            "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤, –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–≤, –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–º –≤–∞–∂–Ω–æ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ. "
            "–î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–∏, –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–∏, –∑–∞–¥–∞–µ–º –∏–Ω—Ç—Ä–∏–≥—É.\n\n"
            "üîπ <b>–°—Ç–∏–ª—å –ò–ª–æ–Ω–∞ –ú–∞—Å–∫–∞ (–≠–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏)</b>\n"
            "–ï—Å–ª–∏ —Ç–≤–æ–π –∫–∞–Ω–∞–ª –ø—Ä–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏–ª–∏ —É —Ç–µ–±—è —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ª—É—á—à–µ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —ç—Ç–æ–≥–æ —Å—Ç–∏–ª—è. "
            "–ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞, –Ω–æ –≥–ª—É–±–æ–∫–∏–π —Å–º—ã—Å–ª, –Ω–∞–º–µ–∫ –Ω–∞ –±—É–¥—É—â–µ–µ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏.\n\n"
            "üìå <i>–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–≤–æ–µ–º—É –∫–∞–Ω–∞–ª—É.</i>",
            parse_mode="HTML",
            reply_markup=kb.style()
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ñ–ª–∞–≥ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è
        await state.update_data(last_message_id=msg.message_id, is_profile_fully_filled=is_profile_fully_filled)
        
        # –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º set_state –≤–º–µ—Å—Ç–æ clear, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        await state.set_state(None)

@router.callback_query(F.data.startswith("go_style"))
async def com_start(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await callback.message.answer(
        "‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n\n"
        "–î–æ–±–∞–≤–∏–ª –í–∞—à —Å—Ç–∏–ª—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n"
        "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n"
        f'–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã –≤ –≤–∏–¥–µ "t.me/–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞" –±–µ–∑ –∫–∞–≤—ã—á–µ–∫.\n'
        f'–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤ —Å—Ä–∞–∑—É, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –ø—Ä–æ–±–µ–ª–∞–º–∏.\n\n'
        f'<i>–ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"</i>',
        parse_mode="HTML",
        reply_markup=kb.neiro_chanels()
    )
    # –¢–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ,
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ is_profile_fully_filled=False
    await state.update_data(last_message_id=msg.message_id, is_profile_fully_filled=False)
    await state.set_state(Step.add_chanels)


async def delete_message_safe(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤
@router.callback_query(F.data.startswith("add_chanels"))
async def handle_add_channels_callback(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await rq.get_user_data(callback.from_user.id)
    
    # –ü–æ—Å–∫–æ–ª—å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã" –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è,
    # –º—ã —Ç–æ—á–Ω–æ –∑–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –∞ –Ω–µ –ø–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_profile_fully_filled=True
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    max_channels = await rq.get_sub_max(callback.from_user.id)
    current_count = await rq.count_channels_for_user(callback.from_user.id)
    remaining = max_channels - current_count
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    channels = await rq.get_chanels(callback.from_user.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
    channels_text = "üì¢ <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
    for i, channel in enumerate(channels, 1):
        channels_text += f"{i}. {channel}\n"
    
    channels_text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    channels_text += f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {current_count}\n"
    channels_text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ—Ç–æ–≤: {remaining}\n"
    channels_text += f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫–∞–Ω–∞–ª–æ–≤: {max_channels}\n\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤
    if remaining == 0:
        await callback.message.edit_text(
            f"<b>üéØ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ ({max_channels})!</b>\n\n"
            f"<i>–ù–∞–∂–º–∏—Ç–µ '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</i>",
            parse_mode="HTML",
            reply_markup=kb.neiro_chanels()
        )
        await state.set_state(Step.add_chanels)
        # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await state.update_data(is_profile_fully_filled=True)
        return
    else:
        await callback.message.edit_text(
            f"<b>‚úÖ –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
            f"{channels_text}\n"
            f"<i>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ t.me/–∏–º—è_–∫–∞–Ω–∞–ª–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.</i>\n"
            f"<i>–ò–ª–∏ –Ω–∞–∂–º–∏ '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞–Ω–∞–ª—ã.</i>",
            parse_mode="HTML",
            reply_markup=kb.neiro_chanels()
        )
        await state.set_state(Step.add_chanels)
        # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        await state.update_data(is_profile_fully_filled=True)


@router.message(Step.add_chanels)
async def add_chanels(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await rq.get_user_data(message.from_user.id)
    max_channels = await rq.get_sub_max(message.from_user.id)
    current_count = await rq.count_channels_for_user(message.from_user.id)
    remaining = max_channels - current_count
    text = message.text.strip().lower()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    is_initial_setup = not data.get("is_profile_fully_filled", True)
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ"
    if text == "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ":
        if current_count == 0:
            msg = await message.answer("–¢—ã –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞–∂–∞—Ç—å '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'.")
            await state.update_data(last_message_id=msg.message_id)
            return
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–ª–∞–≥–∞ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
            if is_initial_setup:
                # –≠—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
                msg = await message.answer(
                    "‚úÖ <b>–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                    "‚è≥ <i>–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</i>",
                    parse_mode="HTML"
                )
                await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–ø—ã—Ç–∞
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
                await state.set_state(Step.all_ready)
                await all_ready(message, state)
            else:
                # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                channels = await rq.get_chanels(message.from_user.id)
                msg = await message.answer(
                    f"‚úÖ <b>–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
                    f"üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(channels)}\n\n"
                    f"<i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é</i>",
                    parse_mode="HTML",
                    reply_markup=kb.main_keyboard_3()
                )
                await state.clear()
            return

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    channels = text.split()

    added_channels = 0
    for channel in channels:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Å—Å—ã–ª–∫–∏
        if not channel.startswith("t.me/"):
            msg = await message.answer("–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å t.me/ (–Ω–∞–ø—Ä–∏–º–µ—Ä, t.me/–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞). –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=kb.neiro_chanels())
            await state.update_data(last_message_id=msg.message_id)
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å—Å—ã–ª–∫–∏
        if len(channel) > 35:
            msg = await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 35 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.", reply_markup=kb.neiro_chanels())
            await state.update_data(last_message_id=msg.message_id)
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç–æ
        if remaining > 0:
            added = await rq.add_chanels(message.from_user.id, channel)
            if added:
                remaining -= 1
                added_channels += 1
            else:
                msg = await message.answer(f"–ö–∞–Ω–∞–ª {channel} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –í–≤–µ–¥–∏ –¥—Ä—É–≥–æ–π.", reply_markup=kb.neiro_chanels())
                await state.update_data(last_message_id=msg.message_id)
        else:
            break

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if added_channels > 0:
        if remaining > 0:
            msg = await message.answer(
                f'‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining} –∫–∞–Ω–∞–ª–æ–≤.\n'
                f'–û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∫–∞–Ω–∞–ª—ã –∏–ª–∏ –Ω–∞–∂–º–∏ "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ".', reply_markup=kb.neiro_chanels()
            )
        else:
            # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∫–∞–Ω–∞–ª–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = await message.answer(
                "‚úÖ –°—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–ù–∞–∂–º–∏—Ç–µ '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", 
                reply_markup=kb.neiro_chanels()
            )
    else:
        msg = await message.answer(
            "–¢—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'.", reply_markup=kb.neiro_chanels()
        )
    await state.update_data(last_message_id=msg.message_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    # –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞
    if remaining == 0 and is_initial_setup:
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        msg = await message.answer(
            f"<b>üéØ –í—ã –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤ ({max_channels})!</b>\n\n"
            f"‚è≥ <i>–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</i>",
            parse_mode="HTML"
        )
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–ø—ã—Ç–∞
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ—Ñ–∏–ª—è
        await state.set_state(Step.all_ready)
        await all_ready(message, state)  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É —à–∞–≥—É


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–æ–≤
@router.message(Step.all_ready)
async def all_ready(message: Union[Message, CallbackQuery], state: FSMContext):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if isinstance(message, CallbackQuery):
        user_id = message.from_user.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        sticker_msg = await message.message.answer_sticker("CAACAgIAAxkBAAENkmln2Vcs_GBmuQWW5JIQ08wsm-DUeAACMgAD9wLID8IewmWo1Zl6NgQ")
        msg = await message.message.answer("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>", parse_mode="HTML")
        bot = message.bot
        chat_id = message.message.chat.id
    else:
        user_id = message.from_user.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä
        sticker_msg = await message.answer_sticker("CAACAgIAAxkBAAENkmln2Vcs_GBmuQWW5JIQ08wsm-DUeAACMgAD9wLID8IewmWo1Zl6NgQ")
        msg = await message.answer("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</i>", parse_mode="HTML")
        bot = message.bot
        chat_id = message.chat.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await rq.get_user_data(user_id)
    channels = await rq.get_chanels(user_id)

    # –ê–Ω–∏–º–∞—Ü–∏—è "–∑–∞–≥—Ä—É–∑–∫–∏"
    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üì° –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API</i>", parse_mode="HTML")
    await asyncio.sleep(0.8)

    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üîó –î–æ–±–∞–≤–ª—è—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª</i>", parse_mode="HTML")
    await asyncio.sleep(0.7)

    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üìù –ó–∞–≥—Ä—É–∂–∞—é –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞</i>", parse_mode="HTML")
    await asyncio.sleep(0.6)

    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üë§ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞</i>", parse_mode="HTML")
    await asyncio.sleep(0.9)

    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üì¢ –î–æ–±–∞–≤–ª—è—é –∫–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</i>", parse_mode="HTML")
    await asyncio.sleep(0.7)

    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏</i>", parse_mode="HTML")
    await asyncio.sleep(1.1)

    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>üéØ –û–ø—Ç–∏–º–∏–∑–∏—Ä—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>", parse_mode="HTML")
    await asyncio.sleep(0.8)

    await msg.edit_text("‚ö° <b>–°–æ–∑–¥–∞—é –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</b>\n\n<i>‚ú® –ü—Ä–∏–º–µ–Ω—è—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</i>", parse_mode="HTML")
    await asyncio.sleep(1)

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –ø–µ—á–∞—Ç–∞—é—â–µ–≥–æ—Å—è —Ç–µ–∫—Å—Ç–∞
    final_msg_text = "üéâ <b>–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
    final_msg_text += f"üìå <b>–í–∞—à –∫–∞–Ω–∞–ª:</b> {user_data.link}\n"
    final_msg_text += f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> {user_data.my_chanel_description}\n"
    final_msg_text += f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞:</b> {user_data.my_profile_description}\n"
    final_msg_text += f"üéØ <b>–ö–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:</b> {len(channels)}\n\n"
    final_msg_text += "<i>–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç</i> –∞ –ø–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞\n"

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_id = msg.message_id
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫—Ä–æ–º–µ —Å—Ç–∏–∫–µ—Ä–∞ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        start_id = max(1, last_message_id - 30)
        for i in range(start_id, last_message_id):
            if i != sticker_msg.message_id and i != last_message_id:
                try:
                    await bot.delete_message(chat_id, i)
                except Exception:
                    continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_msg = await msg.edit_text(final_msg_text, parse_mode="HTML", reply_markup=kb.main_keyboard_go())
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_message_safe(bot, sticker_msg.chat.id, sticker_msg.message_id)
    
    await state.clear()

@router.message(Step.all_ready_go)
async def home(message: Message, state: FSMContext):
    await message.answer(
        f"<b>üöÄ {message.from_user.first_name}, –í–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. </b>\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤—Å–µ –Ω–µ–±—Ö–æ–¥–∏–º–æ–µ.\n\n",
        parse_mode="HTML",  # –£–∫–∞–∑—ã–≤–∞–µ–º parse_mode –æ–¥–∏–Ω —Ä–∞–∑
        reply_markup=kb.main_keyboard_3()  # –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    )
    await state.clear()
    
@router.callback_query(F.data.startswith("next"))
async def com_start(callback: CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await callback.message.answer(
        "<b>–î–∞–ª–µ–µ –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ, –∫–∞–∫ –±—É–¥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥, —Å–∫–æ–ª—å–∫–æ –±–æ—Ç –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –ø–æ—Å—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n\n"
        "<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–µ –º–µ–Ω—å—à–µ —á–µ–º 200 —Å–µ–∫—É–Ω–¥</i>",
        parse_mode="HTML",
        reply_markup=kb.period_com()
    )
    await state.update_data(last_message_id=msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(Step.period_com)
    
@router.message(Step.period_com)
async def period(message: Message, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await delete_message_safe(message.bot, message.chat.id, last_message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await message.answer("–ü–µ—Ä–∏–æ–¥ –∑–∞–ø–∏—Å–∞–Ω ‚úÖ")
    await state.update_data(last_message_id=msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    msg = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥ –±–æ—Ç –±—É–¥–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –æ–¥–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∑–∞ 1 –¥–µ–Ω—å.\n\n"
        "<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –Ω–µ –±–æ–ª–µ–µ 5</i>",
        parse_mode="HTML",
        reply_markup=kb.sleep_bot()
    )
    await state.update_data(last_message_id=msg.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(Step.sleep_bot)

@router.message(Step.sleep_bot)
async def sleep(message: Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await delete_message_safe(message.bot, message.chat.id, last_message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = await message.answer("–ü–æ—Å—Ç—ã –∑–∞–ø–∏—Å–∞–Ω—ã ‚úÖ")
    await state.update_data(last_message_id=msg.message_id)

    msg = await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±–æ—Ç —É–π–¥–µ—Ç –≤ —Å–æ–Ω –ø–æ—Å–ª–µ 50 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.\n\n"
        "<i>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø–æ –æ–ø—ã—Ç—É –Ω–µ –º–µ–Ω–µ–µ —á–µ–º –Ω–∞ 180 –º–∏–Ω—É—Ç</i>",
        parse_mode="HTML",
        reply_markup=kb.sleep_sleep()
    )
    await state.update_data(last_message_id=msg.message_id)
    await state.set_state(Step.launch_bot)

@router.message(Step.launch_bot)
async def all_ready_bot(message: Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    
    if last_message_id:
        await delete_message_safe(message.bot, message.chat.id, last_message_id)

    msg = await message.answer(
        "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å', —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞",
        reply_markup=kb.com_bot()
    )

@router.callback_query(F.data.startswith("compile"))
async def compile_bot(callback: CallbackQuery, state: FSMContext):
    # –ê–Ω–∏–º–∞—Ü–∏—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
    sticker_msg = await callback.message.answer_sticker("CAACAgIAAxkBAAENkmtn2VdDgotY0DzTEqEfmgeGUOg3VQACLAAD9wLID7xB4Mj74UDTNgQ")
    msg = await callback.message.edit_text("‚ö° <b>–ö–æ–º–ø–∏–ª–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n<i>üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞</i>", parse_mode="HTML")
    await asyncio.sleep(1.2)

    await msg.edit_text("‚ö° <b>–ö–æ–º–ø–∏–ª–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n<i>üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è</i>", parse_mode="HTML")
    await asyncio.sleep(0.8)

    await msg.edit_text("‚ö° <b>–ö–æ–º–ø–∏–ª–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n<i>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</i>", parse_mode="HTML")
    await asyncio.sleep(0.9)

    await msg.edit_text("‚ö° <b>–ö–æ–º–ø–∏–ª–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n<i>üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API Telegram</i>", parse_mode="HTML")
    await asyncio.sleep(0.7)

    await msg.edit_text("‚ö° <b>–ö–æ–º–ø–∏–ª–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n<i>ü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ–π—Ä–æ–º–æ–¥—É–ª–µ–π</i>", parse_mode="HTML")
    await asyncio.sleep(1.1)

    await msg.edit_text("‚ö° <b>–ö–æ–º–ø–∏–ª–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n<i>üìä –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</i>", parse_mode="HTML")
    await asyncio.sleep(0.8)

    await msg.edit_text("‚ö° <b>–ö–æ–º–ø–∏–ª–∏—Ä—É—é –±–æ—Ç–∞...</b>\n\n<i>‚ú® –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞</i>", parse_mode="HTML")
    await asyncio.sleep(1)

    # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_id = callback.message.message_id
        chat_id = callback.message.chat.id
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–∫–ª—é—á–∞—è —Å—Ç–∏–∫–µ—Ä –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        for i in range(last_message_id - 100, last_message_id + 1):
            if i != sticker_msg.message_id and i != msg.message_id:
                try:
                    await callback.bot.delete_message(chat_id, i)
                except Exception:
                    continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    welcome_text = (
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!</b>\n\n"
        f"üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!</b>\n\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤\n"
        f"‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞\n"
        f"üìà –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
        f"üîÑ –û–±–Ω–æ–≤–ª—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç\n\n"
        f"<i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏</i>"
    )

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    final_msg = await callback.message.answer(
        welcome_text,
        parse_mode="HTML",
        reply_markup=kb.home_page()
    )
    
    # –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
    await delete_message_safe(callback.bot, sticker_msg.chat.id, sticker_msg.message_id)
    await delete_message_safe(callback.bot, msg.chat.id, msg.message_id)
    
    await state.clear()

#‚Å°‚Å¢‚Å£‚Å¢-----------------------------------------------------–ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—Ç–∞---------------------------------------------------------‚Å°

    
@router.callback_query(F.data.startswith("all_ready_pay"))
async def com_start(callback: CallbackQuery):
    sub = await rq.get_sub(callback.from_user.id)
    if sub.id ==1:
        await callback.message.answer("–£ –≤–∞—Å –ø—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –≤—Å–µ –µ—â–µ –≤–∏–¥–µ—Ç–µ —ç—Ç—É –Ω–∞–¥–ø–∏—Å—å, –Ω–∞–ø–∏—à–∏ –≤ —Ç–µ—Ö –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å—Ä–∞–∑—É –∂–µ —Ä–µ—à–∏–º", reply_markup=kb.main_button())
        return
    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    current_date = datetime.now()
    # –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ 20 –¥–Ω–µ–π
    end_date = current_date + timedelta(days=sub.date_day)
   
    await rq.set_sub_data(callback.from_user.id, end_date)
    await callback.message.answer("–£—Å–ø–µ—à–Ω–æ!", reply_markup= kb.main_button())
    return
    
        

@router.callback_query(F.data.startswith("by_subscriptions"))
async def com_start(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üìä –¢–∞—Ä–∏—Ñ—ã</b>\n\n"
        "üîπ <b>–ù–∞—á–∞–ª—å–Ω—ã–π</b>\n"
        "‚Ä¢ 14 –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ 30 –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ 2490‚ÇΩ <s>4980‚ÇΩ</s>\n"
        "‚Ä¢ 15-25 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å\n\n"
        "üîπ <b>–ë–∞–∑–æ–≤—ã–π</b>\n"
        "‚Ä¢ 20 –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ 30 –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ 2990‚ÇΩ <s>5980‚ÇΩ</s>\n"
        "‚Ä¢ 25-40 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å\n\n"
        "üîπ <b>–ü—Ä–æ</b>\n"
        "‚Ä¢ 35 –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ 30 –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ 4490‚ÇΩ <s>8980‚ÇΩ</s>\n"
        "‚Ä¢ 40-65 –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å\n\n"
        "üîπ <b>–≠–∫—Å–ø–µ—Ä—Ç</b>\n"
        "‚Ä¢ 50 –∫–∞–Ω–∞–ª–æ–≤\n"
        "‚Ä¢ 60 –¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ 7490‚ÇΩ <s>14980‚ÇΩ</s>\n"
        "‚Ä¢ 55+ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –≤ –¥–µ–Ω—å\n\n"
        "üí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ:\n\n"
        "üéØ <i>–°–µ–π—á–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ —Ü–µ–Ω—ã –≤ 2 —Ä–∞–∑–∞ –Ω–∏–∂–µ!</i>\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç—ã, —Ç–æ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è +2000‚ÇΩ",
        parse_mode="HTML",
        reply_markup=kb.get_subscription_keyboard()
    )

@router.callback_query(F.data.startswith("subscriptions"))
async def com_start(callback: CallbackQuery):
    user = await rq.get_user_data(callback.from_user.id)
    date_exit = user.date_sub
    sub = await rq.get_sub(callback.from_user.id)
    sub_id = sub.id
    
    if sub_id != 1:
        message_text = (
            "<b>‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {date_exit}\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {sub.max_chanels}\n\n"
            "üí° –î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞\n"
            "–ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–¥–ø–∏—Å–æ–∫'"
        )
    else:
        message_text = (
            "<b>üéØ –ü—Ä–æ–±–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            "‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞\n"
            "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ 10 –¥–Ω–µ–π\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª\n\n"
            "üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É"
        )

    await callback.message.edit_text(
        message_text,
        parse_mode="HTML",
        reply_markup=kb.main_button()
    )

#‚Å°‚Å¢‚Å£‚Å°‚Å¢‚Å£‚Å¢-------------------------------------------------------------------------------------------------------------------------------‚Å°









#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------














#----------------------------------------------------------------------------------------–ö–ê–ù–ê–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´-------------------------------------------------------------------------------------------------

@router.callback_query(F.data == "list_chanel")
async def com_start(callback: CallbackQuery):
    user = await rq.get_user_data(callback.from_user.id)
    
    await callback.message.edit_text("–¢–≤–æ–∏ –∫–∞–Ω–∞–ª—ã, –≤—ã–±–µ—Ä–∏ —á—Ç–æ –±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å", reply_markup = await kb.inline_chanels(callback.from_user.id))



@router.callback_query(F.data.startswith("query_"))
async def com_start(callback: CallbackQuery):
    old_link = callback.data.replace("query_", "")
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup= kb.ed_or_del(old_link))



@router.callback_query(F.data.startswith("edit_chanel_"))
async def com_start(callback: CallbackQuery, state: FSMContext):
    old_link = callback.data.replace("edit_chanel_", "")
    await state.update_data(old_link=old_link)
    await state.set_state(EditChannelState.waiting_for_new_link)
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –≤–º–µ—Å—Ç–æ –∫–∞–Ω–∞–ª–∞: {old_link}")



@router.message(EditChannelState.waiting_for_new_link)
async def process_new_link(message: Message, state: FSMContext):
    data = await state.get_data()
    old_link = data.get("old_link")  # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    new_link = message.text  # –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    if not new_link.startswith("t.me/"):  # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å t.me/)")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    await rq.update_channel(message.from_user.id, old_link, new_link)

    await message.answer(f"–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω: {old_link} ‚Üí {new_link}")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ



@router.callback_query(F.data.startswith("delete_chanel_"))
async def com_start(callback: CallbackQuery):
    old_link = callback.data.replace("delete_chanel_", "")
    await rq.delete_channel(callback.from_user.id, old_link)
    await callback.message.edit_text(f"–£–¥–∞–ª–∏–ª –∫–∞–Ω–∞–ª {old_link} –∏–∑ –±–∞–∑—ã", reply_markup=kb.main_button() )







@router.callback_query(F.data.startswith("my_bot"))
async def com_start(callback: CallbackQuery):
    user = await rq.get_user_data(callback.from_user.id)
    sub = user.sub_id
    if sub ==1:
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (")
        return
    bot = await rq.get_bot_data(callback.from_user.id)
    await callback.message.edit_text(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à–µ–≥–æ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç  –æ—Å—Ç–∞–≤–ª—Ç—å—Å—è –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏: {bot.link_bot}")
        
        
    
        
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_suba
@router.message(Command('add_suba'))
async def get_chanels_other(message: Message, state: FSMContext):
    await message.answer("–î–∞–≤–∞–π —Ç–≤–æ–π tg_id", reply_markup=kb.main_button())
    await state.set_state(EditChannelState.waiting_tg_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è "waiting_tg_id"
@router.message(EditChannelState.waiting_tg_id)
async def process_channel_link(message: Message, state: FSMContext):
    tg_id = message.text.strip()  # –ü–æ–ª—É—á–∞–µ–º tg_id –∏–∑ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
    if tg_id == "–Ω–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=kb.main_button())
        return

    if not tg_id.isdigit():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —á—Ç–æ tg_id —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
        await message.answer("–¢—ã –≤–≤–µ–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π tg_id. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    tg_id = int(tg_id)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º tg_id –≤ —á–∏—Å–ª–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º tg_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(tg_id=tg_id)

    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ tg_id
    chanels = await rq.get_chanels(tg_id)

    if not chanels:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ tg_id.")
    else:
        for chanel in chanels:
            await message.answer(chanel)

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await state.clear()

@router.callback_query(F.data.startswith("feedback"))
async def com_start(callback: CallbackQuery):
    await callback.message.answer("–í—ã –ø–æ–ø–∞–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª —Å –æ—Ç–∑—ã–≤–∞–º–∏. –î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–µ –æ—á–µ–Ω—å –≤–µ–ª–∏–∫, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç , –Ω–∞–ø–æ–º–∏–Ω–∞—é, –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –Ω–æ–≤—ã–π, –µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª –≤—Å–µ–≥–æ –º–µ—Å—è—Ü –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç. –ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–±–∏—Ä–∞—Ç—å—Å—è +- 5 –æ—Ç–∑—ã–≤–æ–≤ –±—É–¥—É —Å—Ä–∞–∑—É –ø–æ–ø–æ–ª–Ω—è—Ç—å –∏–º–∏ –¥–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª. –ß—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º–∏, –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∑—ã–≤—ã'. –ù–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–∑—ã–≤ —è –¥–æ–±–∞–≤–ª—è—é 14 –¥–Ω–µ–π –∫ –ø–æ–¥–ø–∏—Å–∫–µ –ø–ª—é—Å–æ–º)",  reply_markup=kb.feedback())
    
@router.callback_query(F.data.startswith("otziv"))
async def com_start(callback: CallbackQuery):
    folder_path = os.path.join("feedback")  # –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ñ–æ—Ç–æ
    files = sorted(os.listdir(folder_path))  # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    
    images = [f for f in files if f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.webp'))]  # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    if not images:
        await callback.answer("‚ùå –ù–µ—Ç —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫–µ 'feedback'", show_alert=True)
        return
    
    await callback.message.answer("üì∑ –ó–∞–≥—Ä—É–∂–∞—é –æ—Ç–∑—ã–≤—ã...")
    
    for img in images:
        file_path = os.path.join(folder_path, img)
        photo = FSInputFile(file_path)
        await callback.message.answer_photo(photo)
        await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É

@router.callback_query(F.data.startswith("home_page"))
async def home_page(callback: CallbackQuery, state: FSMContext):
    welcome_text = (
        f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!</b>\n\n"
        f"üéØ <b>–í–∞—à —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</b>\n\n"
        f"‚ú® <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>\n"
        f"üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        f"‚≠ê –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã\n"
        f"üíé –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–æ–π\n"
        f"üöÄ –ó–∞–ø—É—Å–∫–∞—Ç—å –±–æ—Ç–∞\n\n"
        f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è</i>"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    await callback.message.edit_text(
        welcome_text,
        parse_mode="HTML",
        reply_markup=kb.home_page()
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_message_id = callback.message.message_id
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    asyncio.create_task(delete_messages_background(
        callback.bot, 
        callback.message.chat.id, 
        current_message_id
    ))
    
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
async def delete_messages_background(bot, chat_id, current_message_id):
    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –ø–µ—Ä–µ–¥ —Ç–µ–∫—É—â–∏–º, —á—Ç–æ–±—ã –Ω–µ –ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å –≤–µ—Å—å —á–∞—Ç
    start_id = max(1, current_message_id - 10)  # –ù–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ ID
    
    # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    error_count = 0
    max_errors = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
    
    for i in range(current_message_id - 1, start_id - 1, -1):
        try:
            await bot.delete_message(chat_id, i)
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API Telegram
            await asyncio.sleep(0.1)
        except Exception as e:
            error_count += 1
            # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –º–∞–ª–æ 
            # –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
            if error_count <= max_errors:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {i}: {str(e)}")
            elif error_count == max_errors + 1:
                print(f"–î–∞–ª—å–Ω–µ–π—à–∏–µ –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞")
    
    # –ï—Å–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏, –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    if error_count > max_errors:
        print(f"–í—Å–µ–≥–æ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {error_count}")

@router.callback_query(F.data == "enough_channels")
async def handle_enough_channels(callback: CallbackQuery, state: FSMContext):
    current_count = await rq.count_channels_for_user(callback.from_user.id)
    if current_count == 0:
        await callback.message.edit_text(
            "–í—ã –¥–æ–ª–∂–Ω—ã –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            parse_mode="HTML",
            reply_markup=kb.neiro_chanels()
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    is_initial_setup = not data.get("is_profile_fully_filled", True)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if is_initial_setup:
        # –≠—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ - –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await callback.message.edit_text(
            "‚úÖ <b>–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
            "‚è≥ <i>–°–µ–π—á–∞—Å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å...</i>",
            parse_mode="HTML"
        )
        await asyncio.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ–ø—ã—Ç–∞
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        await state.set_state(Step.all_ready)
        await all_ready(callback, state)
    else:
        # –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ü–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        channels = await rq.get_chanels(callback.from_user.id)
        await callback.message.edit_text(
            f"‚úÖ <b>–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!</b>\n\n"
            f"üìä <b>–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {len(channels)}\n\n"
            f"<i>–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é</i>",
            parse_mode="HTML",
            reply_markup=kb.main_keyboard_3()
        )
        await state.clear()

@router.message(Command('clear'))
async def clear_history(message: Message):
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        await message.delete()
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        last_message_id = message.message_id
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π
        deleted_count = 0
        for i in range(last_message_id - 100, last_message_id):
            try:
                await message.bot.delete_message(message.chat.id, i)
                deleted_count += 1
                if deleted_count % 10 == 0:  # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                    await asyncio.sleep(0.5)
            except Exception:
                continue
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ
        cleanup_msg = await message.answer(f"‚ú® –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—á–∏—Å—Ç–∫–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)
        await cleanup_msg.delete()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@router.callback_query(F.data == "my_profile")
async def edit_profile_menu(callback: CallbackQuery):
    user = await rq.get_user_data(callback.from_user.id)
    
    profile_text = (
        f"<b>üßë‚Äçüíª –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
        f"üîó <b>–í–∞—à –∫–∞–Ω–∞–ª:</b> {user.link}\n"
        f"‚ÑπÔ∏è <b>–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:</b> {user.my_chanel_description}\n"
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –±–æ—Ç–∞:</b> {user.my_profile_description}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = [
        [
            InlineKeyboardButton(text="üîó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª", callback_data="edit_link"),
        ],
        [
            InlineKeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞", callback_data="description_chanel"),
            InlineKeyboardButton(text="üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="description_profile")
        ],
        [
            InlineKeyboardButton(text="üì¢ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data="add_chanels"),
            InlineKeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤", callback_data="list_chanel")
        ],
        [
            InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="home_page")
        ]
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await callback.message.edit_text(profile_text, parse_mode="HTML", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞"
@router.callback_query(F.data == "description_chanel")
async def edit_channel_description(callback: CallbackQuery, state: FSMContext):
    user = await rq.get_user_data(callback.from_user.id)
    
    text = (
        f"<b>üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"
        f"<i>{user.my_chanel_description}</i>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–¥–æ 700 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        f"–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≤–∞—à–µ–º —Å—Ç–∏–ª–µ."
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.main_button())
    await state.set_state(EditChannelState.waiting_for_channel_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.message(EditChannelState.waiting_for_channel_description)
async def process_channel_description(message: Message, state: FSMContext):
    new_description = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
    if len(new_description) > 700:
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 700 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await rq.update_chanel_description(message.from_user.id, new_description)
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await message.answer(
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=kb.main_button()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"
@router.callback_query(F.data == "description_profile")
async def edit_profile_description(callback: CallbackQuery, state: FSMContext):
    user = await rq.get_user_data(callback.from_user.id)
    
    text = (
        f"<b>üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n"
        f"<i>{user.my_profile_description}</i>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (–¥–æ 70 —Å–∏–º–≤–æ–ª–æ–≤).\n"
        f"–û–Ω–æ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞, –æ—Ç –∏–º–µ–Ω–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏."
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.main_button())
    await state.set_state(EditChannelState.waiting_for_profile_description)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.message(EditChannelState.waiting_for_profile_description)
async def process_profile_description(message: Message, state: FSMContext):
    new_description = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –æ–ø–∏—Å–∞–Ω–∏—è
    if len(new_description) > 70:
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 70 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await rq.update_profile_description(message.from_user.id, new_description)
    
    # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    await message.answer(
        "‚úÖ <b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        parse_mode="HTML",
        reply_markup=kb.main_button()
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª"
@router.callback_query(F.data == "edit_link")
async def edit_link(callback: CallbackQuery, state: FSMContext):
    user = await rq.get_user_data(callback.from_user.id)
    
    text = (
        f"<b>üîó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"<i>{user.link}</i>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (—Ñ–æ—Ä–º–∞—Ç: t.me/–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞).\n"
        f"–≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –±–æ—Ç–∞,\n"
        f"–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –Ω–µ–π –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª."
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=kb.main_button())
    await state.set_state(EditChannelState.waiting_for_link_update)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
@router.message(EditChannelState.waiting_for_link_update)
async def process_link_update(message: Message, state: FSMContext):
    new_link = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å—Å—ã–ª–∫–∏
    if len(new_link) > 35:
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 35 —Å–∏–º–≤–æ–ª–æ–≤.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    if not new_link.startswith("t.me/"):
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏! –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å t.me/\n"
            "–ü—Ä–∏–º–µ—Ä: t.me/–Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–∞–Ω–∞–ª–∞"
        )
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = await rq.add_link(message.from_user.id, new_link)
    
    if success:
        # –°–æ–æ–±—â–∞–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await message.answer(
            "‚úÖ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            parse_mode="HTML",
            reply_markup=kb.main_button()
        )
    else:
        await message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É!</b>\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–∫–∞—è —Å—Å—ã–ª–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
            parse_mode="HTML",
            reply_markup=kb.main_button()
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
@router.callback_query(F.data == "launch_bot")
async def handle_launch_bot(callback: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await rq.get_user_data(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –ø–æ–¥–ø–∏—Å–∫–∏ (1 = –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è/—Ç–µ—Å—Ç–æ–≤–∞—è)
    if user.sub_id == 1:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
        await callback.message.edit_text(
            "<b>üöÄ –¢–µ—Å—Ç–æ–≤—ã–π –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥</b>\n\n"
            "üîç <b>–í—ã –º–æ–∂–µ—Ç–µ –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥:</b>\n\n"
            "‚Ä¢ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
            "‚Ä¢ –ë–æ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–∏–º–µ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è\n"
            "‚Ä¢ –í—ã —É–≤–∏–¥–∏—Ç–µ, –∫–∞–∫ —ç—Ç–æ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∑–∞–ø—É—Å–∫–µ\n\n"
            "‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞:</b>\n"
            "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –Ω–µ –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
            "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n\n"
            "üî• <b>–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É!</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º", callback_data="test")],
                [InlineKeyboardButton(text="üíé –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É", callback_data="by_subscriptions")],
                [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="home_page")]
            ])
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ–¥–ø–∏—Å–∫–æ–π - –Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–æ–ª–Ω—ã–π —Ä–µ–∂–∏–º
        await callback.message.edit_text(
            "<b>üöÄ –ó–∞–ø—É—Å–∫ –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞</b>\n\n"
            "‚úÖ <b>–£ –≤–∞—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞</b> - –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!\n\n"
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞: {'–ü—Ä–µ–º–∏—É–º' if user.sub_id == 3 else '–°—Ç–∞–Ω–¥–∞—Ä—Ç'}\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {await rq.count_channels_for_user(callback.from_user.id)}\n\n"
            "üî• <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="run_bot")],
                [InlineKeyboardButton(text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞", callback_data="stop_bot")],
                [InlineKeyboardButton(text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="home_page")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"
@router.callback_query(F.data == "stop_bot")
async def handle_stop_bot(callback: CallbackQuery):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∫–æ–º–∞–Ω–¥—É /stop_bot –≤ –º–æ–¥—É–ª–µ neiro_handlers.py
    await callback.message.edit_text(
        "<b>‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...</b>\n\n"
        "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞...",
        parse_mode="HTML"
    )
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stop_bot
    from app.neiro.neiro_handlers import stop_bot
    message = callback.message
    message.from_user = callback.from_user
    await stop_bot(message)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "<b>‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode="HTML",
        reply_markup=kb.home_page()
    )



