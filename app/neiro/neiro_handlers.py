import asyncio
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from telethon import TelegramClient, events, functions, types
from g4f.client import Client
import app.keyboards as kb
import app.database.requests as rq
from concurrent.futures import ThreadPoolExecutor
import random
import logging
import logging
executor = ThreadPoolExecutor()
nero_router = Router()
client = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç


def generate_prompt(post_text):
    return (
        f"–¢—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∂–∏–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. "
        f"–†–µ–∞–≥–∏—Ä—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, —Å —Å–µ—Ç–µ–≤—ã–º —Å–ª–µ–Ω–≥–æ–º, –∏—Ä–æ–Ω–∏–µ–π, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≥–∏–±–æ–≤. "
        f"–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫, –±—É–¥—Ç–æ –µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∞ –¥–µ–≤—É—à–∫–∞. "
        f"–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤. "
        f"---\n{post_text}\n---\n–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ï—Å–ª–∏ –ø–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á—Ç–æ —Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –Ω–∞—Ä–∫–æ—Ç–æ–π, –æ—Ä—É–∂–∏–µ–º, –Ω–∞—Å–∏–ª–∏–µ–º, –≤–æ–π–Ω–æ–π, –£–∫—Ä–∞–∏–Ω–æ–π —Ç–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏—à—å —Ç—Ä–∏ —Ç–æ—á–∫–∏ –∏ –≤—Å–µ!"
    )



def my_generate_prompt(post_text):
    return (
        f"–¢—ã –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram, –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ—Ç –∂–∏–≤—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏. "
        f"–†–µ–∞–≥–∏—Ä—É–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ, —Å —Å–µ—Ç–µ–≤—ã–º —Å–ª–µ–Ω–≥–æ–º, –∏—Ä–æ–Ω–∏–µ–π, –Ω–æ –±–µ–∑ –ø–µ—Ä–µ–≥–∏–±–æ–≤. "
        f"–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫, –±—É–¥—Ç–æ –µ–≥–æ –Ω–∞–ø–∏—Å–∞–ª–∞ –¥–µ–≤—É—à–∫–∞. "
        f"–ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ-–¥–≤–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã–≤–æ–¥–æ–≤. "
        f"---\n{post_text}\n---\n–ù–∞–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ï—Å–ª–∏ –ø–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á—Ç–æ —Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –Ω–∞—Ä–∫–æ—Ç–æ–π, –æ—Ä—É–∂–∏–µ–º, –Ω–∞—Å–∏–ª–∏–µ–º, –≤–æ–π–Ω–æ–π, –£–∫—Ä–∞–∏–Ω–æ–π —Ç–æ —Ç—ã –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏—à—å —Ç—Ä–∏ —Ç–æ—á–∫–∏ –∏ –≤—Å–µ!"
    )


def get_gpt_response(mes_text): 
    print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT...")
    gpt_client = Client()
    
    try:
        response = gpt_client.chat.completions.create(
            model="deepseek-v3",
            messages=[{"role": "user", "content": mes_text}],
            web_search=False
        )
        print(f"–û—Ç–≤–µ—Ç –æ—Ç GPT: {response}")
        return response.choices[0].message.content
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GPT"
import logging
async def async_get_gpt_response(mes_text):
    print(f"–ó–∞–ø—Ä–æ—Å GPT: {mes_text}")
    loop = asyncio.get_event_loop()
    response = await loop.run_in_executor(executor, get_gpt_response, mes_text)
    print(f"–û—Ç–≤–µ—Ç –æ—Ç GPT (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {response}")
    return response
# –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
async def find_channels_with_comments(client, query):
    print(f"–ò—â—É –∫–∞–Ω–∞–ª—ã —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")

    channels_info = []
    result = await client(functions.contacts.SearchRequest(q=query, limit=200))

    for user_or_channel in result.chats:
        try:
            if getattr(user_or_channel, 'broadcast', False):
                participants_count = getattr(user_or_channel, 'participants_count', 0)
                title = getattr(user_or_channel, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                invite_link = f"t.me/{user_or_channel.username}" if getattr(user_or_channel, 'username', None) else None
                comments_available = await has_comments(client, user_or_channel)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
                if participants_count >= 5000 and invite_link and comments_available:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏
                    if query.lower() in title.lower():
                        channels_info.append(invite_link)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")

    random.shuffle(channels_info)
    return channels_info[:50]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 50 –∫–∞–Ω–∞–ª–æ–≤

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
async def has_comments(client, channel):
    try:
        full_channel = await client(functions.channels.GetFullChannelRequest(channel))
        linked_chat_id = getattr(full_channel.full_chat, 'linked_chat_id', None)
        can_comment = getattr(full_channel.full_chat, 'can_view_stats', False)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—Ä—ã—Ç–∞—è –ª–∏ –æ–Ω–∞
        if linked_chat_id:
            linked_chat = await client.get_entity(linked_chat_id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            if not getattr(linked_chat, 'restricted', False):
                return True  # –ì—Ä—É–ø–ø–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è, –º–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã, –Ω–æ –º–æ–∂–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        return can_comment
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è {channel}: {e}")
        return False

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parser
@nero_router.callback_query(F.data.startswith("parser"))
async def start_parser(callback: CallbackQuery):
    user = await rq.get_user_data(callback.from_user.id)
    sub = user.sub_id
    if sub == 1:
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (")
        return
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤:",
        reply_markup=kb.main_button()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
@nero_router.message(F.text & ~F.text.startswith("/") & F.text.startswith("#"))
async def handle_search_query(message: Message):
    user_id = message.from_user.id
    query = message.text

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot = await rq.get_bot_data(user_id)
    user = await rq.get_user_data(user_id)

    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=kb.main_button())
        return

    if not bot:
        await message.answer("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.", reply_markup=kb.main_button())
        return

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–µ—Ä–∞
    try:
        async with TelegramClient(f"session_{user.bot_id}_{bot.link_bot}", bot.api_id, bot.hash_id) as client:
            # –ò—â–µ–º –∫–∞–Ω–∞–ª—ã
            channels = await find_channels_with_comments(client, query)

            if channels:
                result_message = "<b>üì° –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
                result_message += "\n".join(channels)  # –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏
                await message.answer(result_message, parse_mode="HTML", reply_markup=kb.main_button())
            else:
                await message.answer("‚ö†Ô∏è –ö–∞–Ω–∞–ª–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kb.main_button())
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}", reply_markup=kb.main_button())

# –ó–∞–º–µ–Ω–∏–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ —Å–ª–æ–≤–∞—Ä—å
clients = {}

@nero_router.callback_query(F.data.startswith("run_bot"))
async def run_bot(callback: CallbackQuery):
    user = await rq.get_user_data(callback.from_user.id)
    sub = user.sub_id
    if sub ==1:
        await callback.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ (")
        return
    
    user_id = callback.from_user.id
    bot = await rq.get_bot_data(user_id)
    user = await rq.get_user_data(user_id)
    new_about = user.my_profile_description
    description = user.my_chanel_description  # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    API_ID = bot.api_id  
    API_HASH = bot.hash_id  
    CHANNEL_LINKS = await rq.get_chanels(user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in clients and clients[user_id].is_connected():
        await callback.message.answer("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client = TelegramClient(f"session_{bot.id}_{bot.link_bot}", API_ID, API_HASH)
    clients[user_id] = client  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–ª–æ–≤–∞—Ä—å

    async def main():
        await client.start()
        entities = []
        await callback.message.edit_text(
            "<b>üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ–π—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏–Ω–≥–∞!</b>\n\n"
            "<i>–ó–¥–µ—Å—å —Ç–µ–±–µ –¥–µ–ª–∞—Ç—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–¥–æ, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤—å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∏ –≤—Å—ë.</i>\n\n"
            "–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –±—É–¥—É—Ç –æ—Å—Ç–∞–≤–ª–µ–Ω—ã, —è —Ç–µ–±—è –æ—Å–≤–µ–¥–æ–º–ª—é. üîç\n\n"
            "<b>‚ú® –û–∂–∏–¥–∞–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π!</b>\n\n"
            "<b>–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ, –Ω–∞–∂–º–∏ /stop_bot</b>",
            parse_mode="HTML",
        )
        
        await client(functions.account.UpdateProfileRequest(about=new_about))
        for link in CHANNEL_LINKS:
            try:
                entity = await client.get_entity(link)
                entities.append(entity)
                await asyncio.sleep(0.3)
                await callback.message.answer(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {entity.title}")
            except ValueError:
                await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª {link}")

        if not entities:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ –∫ –æ–¥–Ω–æ–º—É –∫–∞–Ω–∞–ª—É.")
            return

        @client.on(events.NewMessage(chats=entities))
        async def new_message_handler(event):
            chat_title = event.chat.title  
            message_id = event.message.id  
            chat_username = event.chat.username  
            mes = event.message
            post_url = f"https://t.me/{chat_username}/{message_id}" if chat_username else "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

            # –°—Ä–∞–∑—É —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –ø–æ—Å—Ç–µ
            await callback.message.answer(
                f"üì© <b>–ù–æ–≤—ã–π –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ:</b> {chat_title}\n"
                f"üîó <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç:</b> {post_url}\n"
                f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω</b>",  # <-- –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–≥ <b>
                parse_mode="HTML"
            )

            comment_chat_id = None
            try:
                discussion_chat = await client(functions.messages.GetDiscussionMessageRequest(
                    peer=event.chat,
                    msg_id=message_id
                ))
                if discussion_chat.messages:
                    comment_chat_id = discussion_chat.messages[0].peer_id.channel_id
                    message_id = discussion_chat.messages[0].id
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞: {e}")

            if not comment_chat_id:
                try:
                    chat_full = await client(functions.channels.GetFullChannelRequest(event.chat))
                    if chat_full.full_chat.linked_chat_id:
                        comment_chat_id = chat_full.full_chat.linked_chat_id
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ –∫–∞–Ω–∞–ª: {e}")

            if comment_chat_id:
                delay = random.randint(18, 60)
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º...")
                await asyncio.sleep(delay)

                if user.sub_id == 3:
                    prompt = my_generate_prompt(mes.text or "–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                else:
                    prompt = generate_prompt(mes.text or "–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

                comment_text = await async_get_gpt_response(prompt)
                print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment_text}")

                try:
                    await client.send_message(entity=comment_chat_id, message=comment_text, reply_to=message_id)
                    comment_status = "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Å—Ç–∞–≤–ª–µ–Ω!"
                except Exception as e:
                    comment_status = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {e}"
            else:
                comment_status = "‚ö†Ô∏è –£ —ç—Ç–æ–≥–æ –ø–æ—Å—Ç–∞ –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤."

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

        await client.run_until_disconnected()

    await main()

@nero_router.message(Command("stop_bot"))
async def stop_bot(message: Message):
    user_id = message.from_user.id
    if user_id in clients and clients[user_id].is_connected():
        await clients[user_id].disconnect()
        del clients[user_id]  # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        await message.answer("‚õî –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", reply_markup=kb.main_button())
    else:
        await message.answer("‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.", reply_markup=kb.main_button())



